from flask import Flask
from flask_admin import Admin
import sys
import logging

from flask_admin._compat import iteritems
from flask_admin.actions import action
from flask_admin.babel import gettext, ngettext, lazy_gettext
from flask import flash
from flask_admin.model.widgets import XEditableWidget
from wtforms import HiddenField
from wtforms.fields.core import UnboundField
from wtforms.validators import InputRequired

from models_peewee import db, Rubricator, Resources, Class, Subject
from flask_admin.contrib.peewee import ModelView
#from forms import ContactForm, LoginForm
#from flask_login import LoginManager, UserMixin, login_required, login_user, current_user
#from flask_babelex import Babel
from model_views import MyView


"""Класс, позволяющий отображать relationship поля у таблицы resources в админке"""
class ResView(ModelView):
    column_hide_backrefs = False
    column_list = ('uin', 'type', 'title', 'git_url', 'description', 'class_name', 'subject_name')

class ThemeView(ModelView):
    column_hide_backrefs = False
    column_list = ('id', 'title', 'uid', 'resource_name', 'description')

class BuildsView(ModelView):
    column_hide_backrefs = False
    column_list = ('uin', 'name', 'short_name', 'short_name_tr', "series_id", 'serie', #'version',
                   'organization_name', 'date', 'class_name', 'resource_name', 'subject_name')

    form_extra_fields = {
        'загрузить файл png': form.FileUploadField('png file')
    }

    def _change_path_data(self, _form):
        try:
            storage_file = _form.file.data

            if storage_file is not None:
                hash = random.getrandbits(128)
                ext = storage_file.filename.split('.')[-1]
                path = '%s.%s' % (hash, ext)
                print(app.config['STORAGE'])
                storage_file.save(
                    os.path.join(app.config['STORAGE'], path)
                )

                _form.name.data = _form.name.data or storage_file.filename
                _form.path.data = path
                _form.type.data = ext

                del _form.file
        except Exception as ex:
            pass
















app = Flask(__name__)

# set optional bootswatch theme
app.config['FLASK_ADMIN_SWATCH'] = 'cerulean'
app.config['SECRET_KEY'] = 'gfgfgghghgfhgfhgfhgfhfgghghghghghg'

#babel = Babel(app)

#@babel.localeselector
#def get_locale():
        # Put your logic here. Application can store locale in
        # user profile, cookie, session, etc.
#        return 'ru'


class HisModel(ModelView):
    def create_editable_list_form(form_base_class, form_class, widget=None):
        """
            Create a form class with all the fields wrapped in a FieldList.

            Wrapping each field in FieldList allows submitting POST requests
            in this format: ('<field_name>-<primary_key>', '<value>')

            Used in the editable list view.

            :param form_base_class:
                WTForms form class, by default `form_base_class` from base.
            :param form_class:
                WTForms form class generated by `form.get_form`.
            :param widget:
                WTForms widget class. Defaults to `XEditableWidget`.
        """
        if widget is None:
            widget = XEditableWidget()

        class ListForm(form_base_class):
            list_form_pk = HiddenField(validators=[InputRequired()])

        # iterate FormMeta to get unbound fields, replace widget, copy to ListForm
        for name, obj in iteritems(form_class.__dict__):
            if isinstance(obj, UnboundField):
                obj.kwargs['widget'] = widget
                setattr(ListForm, name, obj)

                if name == "list_form_pk":
                    raise Exception('Form already has a list_form_pk column.')

        return ListForm

class MyModel(ModelView):
    list_template = 'templates/admin/my_list.html'

    @action('add_tag',
            lazy_gettext('Add tag'),
            lazy_gettext('Are you sure you want to add tag?'))
    def add_tag(self, ids):
        print("HERE", file=sys.stdout)
        try:
            model_pk = getattr(self.model, self._primary_key)
            count = 0
            query = self.model.select().filter(model_pk << ids)

            for m in query:

                print(m, file=sys.stdout)
                # Тут логику запроса
                # в каждома цикле в query будет id записи которую ты выделил перед действием
                # тогда запрос можно клеить с помощью айдишника который в m
                print("HERE", file=sys.stdout)

                count += 1

            flash(ngettext('Record was successfully tagged.',
                           '%(count)s records were successfully tegged.',
                           count,
                           count=count), 'success')
        except Exception as ex:
            if not self.handle_view_exception(ex):
                flash(gettext('Failed to add tags records. %(error)s', error=str(ex)), 'error')



admin = Admin(app, name='database', template_mode='bootstrap4')
#admin.add_view(MyModel(Resources, name='Ресурсы'))
admin.add_view(ModelView(Rubricator, name='Рубрикатор'))
admin.add_view(ModelView(Class, name="Класс"))
admin.add_view(ModelView(Subject, name="Предмет"))
admin.add_view(HisModel(Resources, name="Ресурсы"))
#admin.add_view(MyView(Resources, name='Ресурсы'))

# Add administrative views here

""" Здесь будет функция login """
#@app.route('/login/', methods=['post', 'get'])
#def login():
#    form = LoginForm()
#    if form.validate_on_submit():
#	user = db.session.query(User).filter(User.username == form.username.data).first()
#	if user and user.check_password(form.password.data):
#	    login_user(user, remember=form.remember.data)
#	    return redirect(url_for('admin'))
#
#	flash("Invalid username/password", 'error')
#	return redirect(url_for('login'))
#    return render_template('login.html', form=form)


app.run()
